import type { Metadata } from "next";
import { Cairo } from "next/font/google";
import "./globals.css";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v14-appRouter";
import { ThemeProvider } from "@mui/material/styles";
import theme from "../../styles/theme";
import ResponsiveAppBar from "./components/navbar/NavBar";
import Footer from "./components/footer/Footer";
import { NextIntlClientProvider } from "next-intl";
import { getMessages } from "next-intl/server";
import { useLocale } from "next-intl";
import { setAppLanguage } from "@/shared/constants/languageVar";
import { use } from "react";

const cairo = Cairo({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "IOP - Incident of Perscution",
  description: "Generated by create next app",
  icons: [],
};

/**
 * Asynchronously retrieves a set of messages.
 * @returns {Promise<any>} A promise that resolves to the retrieved messages.
 */
async function getMsgs() {
  return await getMessages();
}

export default function RootLayout({
  children,
  params: { locale },
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {
  // This is for the translation from Language to Language
  const currentLocale = useLocale();

  const messages = use(getMsgs());
  //  Retrieves the current locale and sets the app language accordingly.

  // update the global variable of the language
  setAppLanguage(currentLocale);

  //  Determines if the current locale is right-to-left (RTL) based on the locale.
  const isRTL = currentLocale === "ar" || currentLocale === "fa" ? true : false;
  return (
    <html lang={locale} dir={isRTL ? "rtl" : "ltr"}>
      <head></head>
      <body className={cairo.className}>
        <AppRouterCacheProvider>
          <ThemeProvider theme={theme}>
            <NextIntlClientProvider messages={messages} locale={locale}>
              <ResponsiveAppBar></ResponsiveAppBar>
              {children}
              <Footer />
            </NextIntlClientProvider>
          </ThemeProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
